{"version":3,"sources":["components/containers/Autocomplete.js","services/getDataService.js","components/presentational/ResultSection.js","App.js","serviceWorker.js","index.js"],"names":["Autocomplete","onSubmit","localStorageData","localStorage","getItem","React","useState","split","options","setOptions","activeOption","setActiveOption","filteredOptions","setFilteredOptions","showOptions","setShowOptions","userInput","setUserInput","onClick","e","currentTarget","innerText","document","getElementById","focus","Fragment","className","id","type","onChange","value","undefined","Array","isArray","filter","optionName","toLowerCase","indexOf","onKeyDown","keyCode","setItem","length","autoFocus","placeholder","map","index","key","APIKey","dataService","Instance","DataService","instance","this","searchString","fetch","response","ok","statusText","json","result","main","feels_like","humidity","pressure","temp","temp_max","ftemp_min","weather","icon","wind","deg","gust","speed","ResultSection","error","src","alt","wind_speed","App","setWeather","getData","then","data","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e6d27a6c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Autocomplete = ({ onSubmit }) => {\r\n    const localStorageData = localStorage.getItem('cities');\r\n    const [options, setOptions] = React.useState(localStorageData ? localStorageData.split(',') : []);\r\n    const [activeOption, setActiveOption] = React.useState(-1);\r\n    const [filteredOptions, setFilteredOptions] = React.useState([]);\r\n    const [showOptions, setShowOptions] = React.useState(false);\r\n    const [userInput, setUserInput] = React.useState('');\r\n\r\n    const onChange = (e) => {\r\n        if ((e.currentTarget.value !== '') && (e.currentTarget.value !== undefined) && Array.isArray(options)) {\r\n            setFilteredOptions(options.filter((optionName) => optionName.toLowerCase().indexOf(e.currentTarget.value.toLowerCase()) > -1));\r\n        } else {\r\n            setFilteredOptions([]);\r\n        }\r\n        setActiveOption(-1);\r\n        setShowOptions(true);\r\n        setUserInput(e.currentTarget.value);\r\n    };\r\n\r\n    const onClick = (e) => {\r\n        setActiveOption(0);\r\n        setFilteredOptions([]);\r\n        setShowOptions(false);\r\n        setUserInput(e.currentTarget.innerText);\r\n        const input = document.getElementById('search-input');\r\n        input.focus();\r\n    };\r\n\r\n    const onKeyDown = (e) => {\r\n        if (e.keyCode === 13) {\r\n            if (userInput !== \"\") {\r\n                if (activeOption === -1) {\r\n                    setUserInput(e.currentTarget.value);\r\n                    const localStorageData = localStorage.getItem('cities') || '';\r\n                    if (localStorageData.indexOf(userInput) === -1) {\r\n                        localStorage.setItem('cities', `${localStorageData},${userInput}`);\r\n                        setOptions([...options, userInput])\r\n                    }\r\n                } else {\r\n                    setActiveOption(-1);\r\n                    setUserInput(filteredOptions[activeOption]);\r\n                }\r\n                setShowOptions(false);\r\n                onSubmit(userInput);\r\n            }\r\n\r\n        } else if (e.keyCode === 38) {\r\n            if (activeOption === 0) {\r\n                return;\r\n            }\r\n            setActiveOption(activeOption - 1);\r\n        } else if (e.keyCode === 40) {\r\n            if (activeOption === filteredOptions.length - 1) {\r\n                return;\r\n            }\r\n            setActiveOption(activeOption + 1);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"search-section\">\r\n                <div className=\"search-section__container\">\r\n                    <input\r\n                        id=\"search-input\"\r\n                        type=\"text\"\r\n                        className=\"search-section__input\"\r\n                        onChange={onChange}\r\n                        onKeyDown={onKeyDown}\r\n                        value={userInput || ''}\r\n                        autoFocus={true}\r\n                        placeholder=\"Search...\"\r\n                    />\r\n                    <input type=\"submit\" value=\"\" className=\"search-btn\" onClick={() => onSubmit(userInput)} />\r\n                    {(showOptions && userInput) &&\r\n                        <div className=\"options-container\">\r\n                            <ul className=\"options\">\r\n                                {filteredOptions.map((optionName, index) =>\r\n                                    <li className={index === activeOption ? 'option-active' : ''} key={optionName} onClick={onClick}>\r\n                                        {optionName}\r\n                                    </li>\r\n                                )}\r\n                            </ul>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n\r\nexport default Autocomplete;\r\n\r\nAutocomplete.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired\r\n}\r\n","const URL = \"https://api.openweathermap.org/data/2.5/weather\";\r\nconst APIKey = '8bb6d100086c829397846cea6c9c8004'\r\n\r\nclass DataService {\r\n    constructor() {\r\n        const Instance = DataService.instance;\r\n        if (Instance) return Instance;\r\n        DataService.instance = this;\r\n    }\r\n\r\n    async getData(searchString = 'London') {\r\n        try {\r\n            let response = await fetch(`${URL}?q=${searchString}&appid=${APIKey}`);\r\n            if (response.ok === false) {\r\n                throw response.statusText;\r\n            }\r\n            let result = await response.json();\r\n            return {\r\n                \"feels_like\": result.main.feels_like,\r\n                \"humidity\": result.main.humidity,\r\n                \"pressure\": result.main.pressure,\r\n                \"temp\": result.main.temp,\r\n                \"temp_max\": result.main.temp_max,\r\n                \"temp_min\": result.main.ftemp_min,\r\n                \"icon\": result.weather[0].icon,\r\n                \"wind_deg\": result.wind.deg,\r\n                \"wind_gust\": result.wind.gust,\r\n                \"wind_speed\": result.wind.speed,\r\n                \"error\": ''\r\n            }\r\n        } catch (err) {\r\n            switch (err) {\r\n                case 'Not Found':\r\n                    return { \"error\": \"For this city no result was found!\"};\r\n                default:\r\n                    return { \"error\":`Something went wrong: ${err}`}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlet dataService = new DataService();\r\n\r\nexport default dataService;","import React from \"react\";\r\n\r\nconst ResultSection = ({ weather }) => {\r\n  return (\r\n    <div className=\"result-section__container\">\r\n      {weather.error !== '' ? <p className=\"error\"> {weather.error} </p> :\r\n        <React.Fragment>\r\n          <img id=\"icon\" src={'http://openweathermap.org/img/wn/' + weather.icon + '@2x.png'} alt='' />\r\n          <div className=\"weather-data__container\">\r\n            <p>Влажность: {weather.humidity}</p>\r\n            <p>Давление: {weather.pressure}</p>\r\n            <p>Температура: {weather.temp}</p>\r\n            <p>Скорость ветра: {weather.wind_speed}</p>\r\n          </div>\r\n        </React.Fragment>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ResultSection;","import React from \"react\";\r\nimport Autocomplete from './components/containers/Autocomplete';\r\nimport dataService from './services/getDataService';\r\nimport ResultSection from \"./components/presentational/ResultSection\";\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const [weather, setWeather] = React.useState({});\r\n  const getDataFromServer = (value) => {\r\n    dataService.getData(value).then(data => setWeather(data));\r\n  }\r\n  return (\r\n    <div className=\"main-container\">\r\n        <Autocomplete onSubmit={getDataFromServer} />    \r\n        <div className=\"result-section\" >\r\n          {JSON.stringify(weather) !== '{}' && <ResultSection weather={weather} />}\r\n        </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}